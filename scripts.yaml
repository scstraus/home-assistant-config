#    #turn input booleans for all playlist states to off
#  turn_playlists_off:
#    sequence:
#    - service: input_boolean.turn_off
#      data: 
#        entities:  
#        - input_boolean.mix_playlist
#        - input_boolean.jazz_playlist
#        - input_boolean.rock_playlist
#        - input_boolean.pop_playlist
#        - input_boolean.black_playlist
#        - input_boolean.best-black_playlist
#        - input_boolean.electronica_playlist
#        - input_boolean.kids_playlist




#input_boolean.mix_playlist, input_boolean.jazz_playlist, input_boolean.rock_playlist, input_boolean.pop_playlist, input_boolean.black_playlist, input_boolean.classical_playlist, input_boolean.electronica_playlist, input_boolean.kids_playlist




#  - service: notify.pushover
#    data_template:
#      title: "{{ title }}"
#      message: "{{ message }}"

  #turn input booleans for all playlist states to off

#
#  turn_playlists_on:
#    sequence:
#    - service: input_boolean.turn_on
#      data: 
#        entities:
#        - input_boolean.mix_playlist
#        - input_boolean.jazz_playlist
#        - input_boolean.rock_playlist
#        - input_boolean.pop_playlist
#        - input_boolean.black_playlist
#        - input_boolean.classical_playlist
#        - input_boolean.electronica_playlist
#        - input_boolean.kids_playlist
#      
#      input_boolean.mix_playlist, input_boolean.jazz_playlist, input_boolean.rock_playlist, input_boolean.pop_playlist, input_boolean.black_playlist, input_boolean.classical_playlist, input_boolean.electronica_playlist, input_boolean.kids_playlist
#      input_boolean.mix_playlist
#      input_boolean.jazz_playlist
#      input_boolean.rock_playlist
#      input_boolean.pop_playlist
#      input_boolean.black_playlist
#      input_boolean.classical_playlist
#      input_boolean.electronica_playlist
#      input_boolean.kids_playlist
#
#
#      - input_boolean.mix_playlist
#      - input_boolean.jazz_playlist
#      - input_boolean.rock_playlist
#      - input_boolean.pop_playlist
#      - input_boolean.black_playlist
#      - input_boolean.classical_playlist
#      - input_boolean.electronica_playlist
#      - input_boolean.kids_playlist

###### Automations to bridge Alexa to iTunes and play selected playlists on house speakers over AirPlay. I define node anchors in the first occurence and just reuse them in the subsequent ones so I only have one place to edit when I need to change the logic, since those parts are the same for all automations.
#
#  play_good_music:
#    sequence:
#      - service: homeassistant.turn_off
#        <<: &turn_off_speakers_data_template_anchor
#          data_template: 
#            entity_id: >- 
#              {% if (states.sensor.last_alexa.state == "media_player.kichen_bar_kindle_fire") or (states.sensor.last_alexa.state == "media_player.alexa_living_room") or (states.sensor.last_alexa.state == "media_player.alexa_kitchen") %} 
#                group.all_speakers
#              {% else %}
#                group.all_speakers
#              {% endif %}
#      - service: homeassistant.turn_on
#        <<: &turn_on_speakers_data_template_anchor
#          data_template: 
#            entity_id: >-
#              {% if (states.sensor.last_alexa.state == "media_player.kichen_bar_kindle_fire") or (states.sensor.last_alexa.state == "media_player.alexa_living_room") or (states.sensor.last_alexa.state == "media_player.alexa_kitchen") %} 
#                group.alexa_kitchen_bar_speakers
#              {% elif states.sensor.last_alexa.state == "media_player.sophies_room_echo_dot" %} 
#                media_player.sophie_s_room_airtunes_speaker
#              {% elif states.sensor.last_alexa.state == "media_player.office_alexa" %} 
#                media_player.office_airtunes_speaker
#              {% elif states.sensor.last_alexa.state == "media_player.alexa_master_bath" %} 
#                media_player.master_bath_airtunes_speaker
#              {% endif %}
#      - service: homeassistant.turn_off
#        <<: &turn_off_computer_speakers_data_template_anchor
#          data_template: 
#            entity_id: >- 
#              {% if (states.sensor.last_alexa.state == "media_player.kichen_bar_kindle_fire") or (states.sensor.last_alexa.state == "media_player.alexa_living_room") or (states.sensor.last_alexa.state == "media_player.alexa_kitchen") %}  
#                media_player.computer_airtunes_speaker
#              {% else %}
#                media_player.computer_airtunes_speaker
#              {% endif %}
#      - service: media_player.volume_set
#        <<: &turn_on_target_speakers_data_template_anchor
#          data_template: 
#            entity_id: >- 
#              {% if (states.sensor.last_alexa.state == "media_player.kichen_bar_kindle_fire") or (states.sensor.last_alexa.state == "media_player.alexa_living_room") or (states.sensor.last_alexa.state == "media_player.alexa_kitchen") %} 
#                group.alexa_kitchen_bar_speakers
#              {% elif states.sensor.last_alexa.state == "media_player.sophies_room_echo_dot" %} 
#                media_player.sophie_s_room_airtunes_speaker
#              {% elif states.sensor.last_alexa.state == "media_player.office_alexa" %} 
#                media_player.office_airtunes_speaker
#              {% elif states.sensor.last_alexa.state == "media_player.alexa_master_bath" %} 
#                media_player.master_bath_airtunes_speaker
#              {% endif %}
#            volume_level: 0.5
#      - service: media_player.volume_set
#        data: 
#          entity_id: media_player.itunes
#          volume_level: 0.5
#      - service: media_player.play_media
#        data:
#          entity_id: 'media_player.itunes'
#          media_content_id: 'a-45-star'
#          media_content_type: 'playlist'
#
##      - delay:
##          seconds: 2
##      - service: python_script.call_service_on_multiple_entities
##        data_template:
##          operations: >
##            {% set topic = states.sensor.last_alexa.state %}
##            {% if topic == 'media_player.kichen_bar_kindle_fire' %}
##              homeassistant.turn_on|media_player.kitchen_airtunes_speaker|media_player.living_room_airtunes_speaker
##            {% else %}
##            {% endif %}
#
#  play_jazz_music:
#    sequence:
#      - service: homeassistant.turn_off
#        <<: *turn_off_speakers_data_template_anchor
#      - service: homeassistant.turn_on
#        <<: *turn_on_speakers_data_template_anchor
#      - service: homeassistant.turn_off
#        <<: *turn_off_computer_speakers_data_template_anchor
#      - service: media_player.volume_set
#        <<: *turn_on_target_speakers_data_template_anchor
#      - service: media_player.volume_set
#        data: 
#          entity_id: media_player.itunes
#          volume_level: 0.5
#      - service: media_player.play_media
#        data:
#          entity_id: 'media_player.itunes'
#          media_content_id: 'best-jazz'
#          media_content_type: 'playlist'
#
#  play_rock_music:
#    sequence:
#      - service: homeassistant.turn_off
#        <<: *turn_off_speakers_data_template_anchor
#      - service: homeassistant.turn_on
#        <<: *turn_on_speakers_data_template_anchor
#      - service: homeassistant.turn_off
#        <<: *turn_off_computer_speakers_data_template_anchor
#      - service: media_player.volume_set
#        <<: *turn_on_target_speakers_data_template_anchor
#      - service: media_player.volume_set
#        data: 
#          entity_id: media_player.itunes
#          volume_level: 0.5
#      - service: media_player.play_media
#        data:
#          entity_id: 'media_player.itunes'
#          media_content_id: 'best-rock'
#          media_content_type: 'playlist'
#
#  play_pop_music:
#    sequence:
#      - service: homeassistant.turn_off
#        <<: *turn_off_speakers_data_template_anchor
#      - service: homeassistant.turn_on
#        <<: *turn_on_speakers_data_template_anchor
#      - service: homeassistant.turn_off
#        <<: *turn_off_computer_speakers_data_template_anchor
#      - service: media_player.volume_set
#        <<: *turn_on_target_speakers_data_template_anchor
#      - service: media_player.volume_set
#        data: 
#          entity_id: media_player.itunes
#          volume_level: 0.5
#      - service: media_player.play_media
#        data:
#          entity_id: 'media_player.itunes'
#          media_content_id: 'best-pop'
#          media_content_type: 'playlist'
#
#
#  play_classical_music:
#    sequence:
#      - service: homeassistant.turn_off
#        <<: *turn_off_speakers_data_template_anchor
#      - service: homeassistant.turn_on
#        <<: *turn_on_speakers_data_template_anchor
#      - service: homeassistant.turn_off
#        <<: *turn_off_computer_speakers_data_template_anchor
#      - service: media_player.volume_set
#        <<: *turn_on_target_speakers_data_template_anchor
#      - service: media_player.volume_set
#        data: 
#          entity_id: media_player.itunes
#          volume_level: 0.5
#      - service: media_player.play_media
#        data:
#          entity_id: 'media_player.itunes'
#          media_content_id: 'classical'
#          media_content_type: 'playlist'
#
#  play_black_music:
#    sequence:
#      - service: homeassistant.turn_off
#        <<: *turn_off_speakers_data_template_anchor
#      - service: homeassistant.turn_on
#        <<: *turn_on_speakers_data_template_anchor
#      - service: homeassistant.turn_off
#        <<: *turn_off_computer_speakers_data_template_anchor
#      - service: media_player.volume_set
#        <<: *turn_on_target_speakers_data_template_anchor
#      - service: media_player.volume_set
#        data: 
#          entity_id: media_player.itunes
#          volume_level: 0.5
#      - service: media_player.play_media
#        data:
#          entity_id: 'media_player.itunes'
#          media_content_id: 'best-black'
#          media_content_type: 'playlist'
#
#
#  play_electronic_music:
#    sequence:
#      - service: homeassistant.turn_off
#        <<: *turn_off_speakers_data_template_anchor
#      - service: homeassistant.turn_on
#        <<: *turn_on_speakers_data_template_anchor
#      - service: homeassistant.turn_off
#        <<: *turn_off_computer_speakers_data_template_anchor
#      - service: media_player.volume_set
#        <<: *turn_on_target_speakers_data_template_anchor
#      - service: media_player.volume_set
#        data: 
#          entity_id: media_player.itunes
#          volume_level: 0.5
#      - service: media_player.play_media
#        data:
#          entity_id: 'media_player.itunes'
#          media_content_id: 'best-electronica'
#          media_content_type: 'playlist'
#
#
#  play_kids_music:
#    sequence:
#      - service: homeassistant.turn_off
#        <<: *turn_off_speakers_data_template_anchor
#      - service: homeassistant.turn_on
#        <<: *turn_on_speakers_data_template_anchor
#      - service: homeassistant.turn_off
#        <<: *turn_off_computer_speakers_data_template_anchor
#      - service: media_player.volume_set
#        <<: *turn_on_target_speakers_data_template_anchor
#      - service: media_player.volume_set
#        data: 
#          entity_id: media_player.itunes
#          volume_level: 0.5
#      - service: media_player.play_media
#        data:
#          entity_id: 'media_player.itunes'
#          media_content_id: 'kids-english'
#          media_content_type: 'playlist'
#          
#  play_kultoora_radio:
#    sequence:
#      - service: homeassistant.turn_off
#        <<: *turn_off_speakers_data_template_anchor
#      - service: homeassistant.turn_on
#        <<: *turn_on_speakers_data_template_anchor
#      - service: homeassistant.turn_off
#        <<: *turn_off_computer_speakers_data_template_anchor
#      - service: media_player.volume_set
#        <<: *turn_on_target_speakers_data_template_anchor
#      - service: media_player.volume_set
#        data: 
#          entity_id: media_player.itunes
#          volume_level: 0.5
#      - service: media_player.play_media
#        data:
#          entity_id: 'media_player.itunes'
#          media_content_id: 'radio-kultura-ru'
#          media_content_type: 'playlist'
#
#          
#  play_clasical_radio:
#    sequence:
#      - service: homeassistant.turn_off
#        <<: *turn_off_speakers_data_template_anchor
#      - service: homeassistant.turn_on
#        <<: *turn_on_speakers_data_template_anchor
#      - service: homeassistant.turn_off
#        <<: *turn_off_computer_speakers_data_template_anchor
#      - service: media_player.volume_set
#        <<: *turn_on_target_speakers_data_template_anchor
#      - service: media_player.volume_set
#        data: 
#          entity_id: media_player.itunes
#          volume_level: 0.5
#      - service: media_player.play_media
#        data:
#          entity_id: 'media_player.itunes'
#          media_content_id: 'radio-swiss-classic'
#          media_content_type: 'playlist'
#
#          
#  play_jazz_radio:
#    sequence:
#      - service: homeassistant.turn_off
#        <<: *turn_off_speakers_data_template_anchor
#      - service: homeassistant.turn_on
#        <<: *turn_on_speakers_data_template_anchor
#      - service: homeassistant.turn_off
#        <<: *turn_off_computer_speakers_data_template_anchor
#      - service: media_player.volume_set
#        <<: *turn_on_target_speakers_data_template_anchor
#      - service: media_player.volume_set
#        data: 
#          entity_id: media_player.itunes
#          volume_level: 0.5
#      - service: media_player.play_media
#        data:
#          entity_id: 'media_player.itunes'
#          media_content_id: 'jazz24'
#          media_content_type: 'playlist'
#
#          
#  play_ambient_radio:
#    sequence:
#      - service: homeassistant.turn_off
#        <<: *turn_off_speakers_data_template_anchor
#      - service: homeassistant.turn_on
#        <<: *turn_on_speakers_data_template_anchor
#      - service: homeassistant.turn_off
#        <<: *turn_off_computer_speakers_data_template_anchor
#      - service: media_player.volume_set
#        <<: *turn_on_target_speakers_data_template_anchor
#      - service: media_player.volume_set
#        data: 
#          entity_id: media_player.itunes
#          volume_level: 0.5
#      - service: media_player.play_media
#        data:
#          entity_id: 'media_player.itunes'
#          media_content_id: 'ambient-sleeping-pill'
#          media_content_type: 'playlist'
#
#  play_europa2_radio:
#    sequence:
#      - service: homeassistant.turn_off
#        <<: *turn_off_speakers_data_template_anchor
#      - service: homeassistant.turn_on
#        <<: *turn_on_speakers_data_template_anchor
#      - service: homeassistant.turn_off
#        <<: *turn_off_computer_speakers_data_template_anchor
#      - service: media_player.volume_set
#        <<: *turn_on_target_speakers_data_template_anchor
#      - service: media_player.volume_set
#        data: 
#          entity_id: media_player.itunes
#          volume_level: 0.5
#      - service: media_player.play_media
#        data:
#          entity_id: 'media_player.itunes'
#          media_content_id: 'europa2'
#          media_content_type: 'playlist'

  stop_music:
    sequence:
      - service: media_player.media_pause
        data: 
          entity_id: media_player.forked_daapd_server
    
  start_music:
    sequence:
      - service: media_player.media_play
        data: 
          entity_id: media_player.forked_daapd_server
          
  turn_up_music_volume:
    sequence:
      - service: media_player.volume_up
        data: 
          entity_id: media_player.forked_daapd_server       
      - service: media_player.volume_up
        data: 
          entity_id: media_player.forked_daapd_server  
      - service: media_player.volume_up
        data: 
          entity_id: media_player.forked_daapd_server  
      - service: media_player.volume_up
        data: 
          entity_id: media_player.forked_daapd_server  


  turn_down_music_volume:
    sequence:
      - service: media_player.volume_down
        data: 
          entity_id: media_player.forked_daapd_server      
      - service: media_player.volume_down
        data: 
          entity_id: media_player.forked_daapd_server 
      - service: media_player.volume_down
        data: 
          entity_id: media_player.forked_daapd_server 
      - service: media_player.volume_down
        data: 
          entity_id: media_player.forked_daapd_server 

  skip_this_song:
    sequence:
      - service: media_player.media_next_track
        data: 
          entity_id: media_player.forked_daapd_server

  play_last_song:
    sequence:
      - service: media_player.media_previous_track
        data: 
          entity_id: media_player.forked_daapd_server

  where_is_sean:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >-
            Sean is {{ states.sensor.sean_location.state }}

  when_will_sean_be_home:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >-
            {{ states.sensor.sean_eta.state }}. 
            {{ states.sensor.sean_eta_description.state }}


  where_is_alena:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >-
            Alena is {{ states.sensor.alena_location.state }}

  when_will_alena_be_home:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >-
            {{ states.sensor.alena_eta.state }}. 
            {{ states.sensor.alena_eta_description.state }}

  where_is_sophie:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >-
            Sophie is {{ states.sensor.sophie_location.state }}

  when_will_sophie_be_home:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >-
            {{ states.sensor.sophie_eta.state }}. 
            {{ states.sensor.sophie_eta_description.state }}

  is_today_a_bike_day:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: notify.alexa_media
        data_template:
          target: 
            - '{{ states.sensor.last_alexa.state }}' 
          data:
            type: tts
          message: >- 
            {% if states.sensor.bike_day.state == "yes" %} 
              Yes, today is a good day to bike to work
            {% else %}
              No, today isn't a good day to bike to work
            {% endif %}

  xbox_pause_play:
    sequence:
      - service: remote.send_command
        data:
          entity_id: remote.harmony
          command:
            - OK
          device: Xbox-SystemOS

  plex_pause:
    sequence:
      - service: remote.send_command
        data:
          entity_id: remote.harmony
          command: 
            - Pause
          device: "Xbox-SystemOS"

  plex_play:
    sequence:
      - service: remote.send_command
        data:
          entity_id: remote.harmony
          command: 
            - Play
          device: "Xbox-SystemOS"


#  xbox_pause_play:
#    sequence:
#      - choose:
#          - conditions:
#              - condition: state
#                entity_id: media_player.xbox_systemos_2
#                attribute: media_title
#                state: heat
#            sequence:
#              - service: script.sim_morning
#        default:
#          - service: remote.send_command
#            data:
#              entity_id: remote.harmony
#              command:
#                - OK

## New playlist scripts which use app daemon

  play_good_music:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
          playlist: "A: 4+5 Star"

  play_jazz_music:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
          playlist: "Best Jazz"
          
  play_rock_music:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
          playlist: "Best Rock"

  play_pop_music:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
          playlist: "Best Pop"

  play_classical_music:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
          playlist: "Classical"

  play_black_music:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
          playlist: "Best Black"

  play_electronic_music:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
          playlist: "Best Electronica"

  play_kids_music:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
          playlist: "kids-english"

  play_christmas_music:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - service: media_player.shuffle_set
        data:
          entity_id: media_player.forked_daapd_server
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "christmas"
          playlist: "Christmas"
#      - service: input_boolean.turn_on
#        data:
#          entity_id: input_boolean.itunes_shuffle
  play_kultoora_radio:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
          playlist: "Radio Kultura RU"

  play_classical_radio:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
          playlist: "Radio Swiss Classic"

  play_jazz_radio:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
          playlist: "Jazz24"

  play_ambient_radio:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
          playlist: "Ambient Sleeping Pill"

  play_europa2_radio:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
          playlist: "Europa2"

#
#  play_good_music:
#    sequence:
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "{{ states.sensor.last_alexa.state }}"
#          playlist: "a-45-star"
#
#  play_jazz_music:
#    sequence:
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "{{ states.sensor.last_alexa.state }}"
#          playlist: "best-jazz"
#          
#  play_rock_music:
#    sequence:
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "{{ states.sensor.last_alexa.state }}"
#          playlist: "best-rock"
#
#  play_pop_music:
#    sequence:
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "{{ states.sensor.last_alexa.state }}"
#          playlist: "best-pop"
#
#  play_classical_music:
#    sequence:
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "{{ states.sensor.last_alexa.state }}"
#          playlist: "classical"
#
#  play_black_music:
#    sequence:
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "{{ states.sensor.last_alexa.state }}"
#          playlist: "best-black"
#
#  play_electronic_music:
#    sequence:
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "{{ states.sensor.last_alexa.state }}"
#          playlist: "best-electronica"
#
#  play_kids_music:
#    sequence:
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "{{ states.sensor.last_alexa.state }}"
#          playlist: "kids-english"
#
#  play_christmas_music:
#    sequence:
#      - service: input_boolean.turn_on
#        data:
#          entity_id: input_boolean.itunes_shuffle
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "christmas"
#          playlist: "christmas"
#
#  play_kultoora_radio:
#    sequence:
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "{{ states.sensor.last_alexa.state }}"
#          playlist: "radio-kultura-ru"
#
#  play_classical_radio:
#    sequence:
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "{{ states.sensor.last_alexa.state }}"
#          playlist: "radio-swiss-classic"
#
#  play_jazz_radio:
#    sequence:
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "{{ states.sensor.last_alexa.state }}"
#          playlist: "jazz24"
#
#  play_ambient_radio:
#    sequence:
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "{{ states.sensor.last_alexa.state }}"
#          playlist: "ambient-sleeping-pill"
#
#  play_europa2_radio:
#    sequence:
#      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
#        event_data_template: 
#          alexa_entity: "{{ states.sensor.last_alexa.state }}"
#          playlist: "europa2"

  turn_on_christmas:
    sequence:
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.itunes_shuffle
      - service: switch.turn_on
        data:
          entity_id: switch.miele_dishwasher_switch
      - service: media_player.play_media
        data:
          entity_id: media_player.chromecast
          media_content_type: cast
          media_content_id: '
            {
              "app_name": "youtube",
              "media_id": "8WBThkkpnaA"
            }'
      - event: ALEXA_LAUNCH_ITUNES_PLAYLIST
        event_data_template: 
          alexa_entity: "christmas"
          playlist: "christmas"
      - service: dreamscreen.set_ambient_scene
        data:
          entity_id: dreamscreen.living_room_tv
          scene: 6
      - service: dreamscreen.set_brightness
        data:
          entity_id: dreamscreen.living_room_tv
          brightness: 90
      - service: remote.turn_on
        entity_id: remote.harmony
        data:
           activity: "Chrome Cast"
      - service: remote.send_command
        data:
          entity_id: remote.harmony
          command:
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown   
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown 
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown
            - VolumeDown          
          device: "Sony TV"
          delay_secs: 0.0
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.christmas_mode


#entity_id: media_player.chromecast
#media_content_type: movie
#media_content_id: 'plex://{"Discworld": "Movies", "title": "A.Charlie.Brown.Christmas.1965.1080p.BluRay.H264.AAC-RARBG"}'

  turn_off_christmas:
    sequence:
      - service: media_player.media_pause
        data:
          entity_id: media_player.itunes
      - service: switch.turn_off
        data:
          entity_id: switch.miele_dishwasher_switch
      - service: dreamscreen.set_brightness
        data:
          entity_id: dreamscreen.living_room_tv
          brightness: 42
      - service: dreamscreen.set_mode
        data:
          entity_id: dreamscreen.living_room_tv
          mode: 1
      - service: dreamscreen.set_mode
        data:
          entity_id: dreamscreen.living_room_tv
          mode: 0
      - service: remote.turn_off
        data:
          entity_id: remote.harmony
      - service: media_player.turn_off
        data:
          entity_id: media_player.chromecast
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.christmas_mode

  turn_on_christmas_tree:
    sequence:
      - service: switch.turn_on
        data:
          entity_id: switch.miele_dishwasher_switch

  turn_off_christmas_tree:
    sequence:
      - service: switch.turn_off
        data:
          entity_id: switch.miele_dishwasher_switch
      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.christmas_mode

  turn_on_the_speakers:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_TURN_ON_SPEAKERS
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"

  turn_off_the_speakers:
    sequence:
      - service: alexa_media.update_last_called  #this will force update the last Alexa attribute used by the sensor
      - delay: 00:00:01  # you may need to increase this value if you dont get the response on the echo you asked the question
      - event: ALEXA_TURN_OFF_SPEAKERS
        event_data_template: 
          alexa_entity: "{{ states.sensor.last_alexa.state }}"
        
  announce_dishes_are_clean:
    sequence:
#
#  announce_left_dishwasher_door_open:
#    sequence:

  announce_dishes_are_not_done_yet:
    sequence:

  announce_forgot_to_run_the_dishes_master_closet:
    sequence:

  announce_forgot_to_run_the_dishes_living_room:
    sequence:

  announce_forgot_to_run_the_dishes_master_bath:
    sequence:

  announce_trash_day_trash_not_out:
    sequence:

#  announce_its_raining_with_sebastian_roof_window_open_everywhere:
#    sequence:

  announce_its_raining_with_sebastian_roof_window_open_office:
    sequence:

#  announce_its_raining_with_sophie_roof_window_open_everywhere:
#    sequence:

  announce_its_raining_with_sophie_roof_window_open_office:
    sequence:
#
#  announce_water_under_the_sink_everywhere:
#    sequence:

  announce_water_under_the_sink_office:
    sequence:

#  announce_someone_at_the_gate_kitchen:
#    sequence:
#
#  announce_someone_at_the_gate_master_bath:
#    sequence:
#
#  announce_someone_at_the_gate_master_closet:
#    sequence:
#
#  announce_someone_at_the_gate_master_1st_floor_bathroom:
#    sequence: 
    
  announce_you_left_the_sliding_door_open:
    sequence:

  announce_sebastian_dont_play_with_tablet:
    sequence:

  announce_thank_sebastian_for_putting_back_tablet:
    sequence: